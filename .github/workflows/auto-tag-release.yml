name: Auto Tag and Release

permissions:
  contents: write

on:
  push:
    branches: [ main ]

jobs:
  auto-tag-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: 手动克隆代码
        run: |
          git clone https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git .
          git fetch --tags
      
      - name: 从 pyproject.toml 提取版本号
        id: get_version
        run: |
          version=$(grep '^version' pyproject.toml | head -1 | sed 's/version = "//;s/"//')
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "当前版本：$version"
          # 检查是否为开发版本
          if [[ $version =~ dev|alpha|beta|a|b ]]; then
            echo "is_dev=true" >> $GITHUB_OUTPUT
          else
            echo "is_dev=false" >> $GITHUB_OUTPUT
          fi
      
      - name: 获取最新提交信息
        id: get_commit
        run: |
          commit_hash=$(git rev-parse HEAD)
          commit_short=$(git rev-parse --short HEAD)
          echo "commit_hash=$commit_hash" >> $GITHUB_OUTPUT
          echo "commit_short=$commit_short" >> $GITHUB_OUTPUT
      
      - name: 获取标签信息
        id: get_tag
        run: |
          latest_tag=$(git tag --sort=-v:refname | head -n 1)
          previous_tag=$(git tag --sort=-v:refname | head -n 2 | tail -n 1)
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT
          echo "previous_tag=$previous_tag" >> $GITHUB_OUTPUT
          echo "最新标签：$latest_tag"
          echo "上一个标签：$previous_tag"
      
      - name: 创建版本标签和发布
        run: |
          current_version=${{ steps.get_version.outputs.version }}
          commit_short=${{ steps.get_commit.outputs.commit_short }}
          is_dev=${{ steps.get_version.outputs.is_dev }}
          
          # 从 CHANGELOG.md 提取更新日志
          release_body=$(sed -n "/^## \[$current_version\]/,/^## /p" docs/CHANGELOG.md | sed '1d;$d')
          if [ -z "$release_body" ]; then
            release_body="- 代码更新 ($commit_short)"
          fi
          
          # 创建标签名
          tag_name="v$current_version"
          
          # 检查标签是否已存在
          if ! git rev-parse "$tag_name" >/dev/null 2>&1; then
            # 使用 jq 组装 JSON 参数
            json=$(jq -n \
              --arg tag "$tag_name" \
              --arg name "Release $tag_name" \
              --arg body "$release_body" \
              --argjson prerelease $is_dev \
              '{
                tag_name: $tag,
                name: $name,
                body: $body,
                prerelease: $prerelease,
                generate_release_notes: true
              }')
            
            # 创建标签
            git tag "$tag_name"
            git push origin "$tag_name"
            
            # 创建发行版
            curl -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              https://api.github.com/repos/${{ github.repository }}/releases \
              -d "$json"
            
            echo "已创建新标签和发行版：$tag_name"
          else
            echo "标签 $tag_name 已存在，跳过创建"
          fi