name: Auto Tag and Release

permissions:
  contents: write

on:
  push:
    branches: [ main ]

jobs:
  auto-tag-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: 手动克隆代码
        run: |
          git clone https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git .
          git fetch --tags
      
      - name: 从 pyproject.toml 提取版本号
        id: get_version
        run: |
          version=$(grep '^version' pyproject.toml | head -1 | sed 's/version = "//;s/"//')
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "当前版本：$version"
      
      - name: 获取标签信息
        id: get_tag
        run: |
          latest_tag=$(git tag --sort=-v:refname | head -n 1)
          previous_tag=$(git tag --sort=-v:refname | head -n 2 | tail -n 1)
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT
          echo "previous_tag=$previous_tag" >> $GITHUB_OUTPUT
          echo "最新标签：$latest_tag"
          echo "上一个标签：$previous_tag"
      
      - name: 检查版本更新并打标签
        id: create_tag
        run: |
          current_version=${{ steps.get_version.outputs.version }}
          latest_tag=${{ steps.get_tag.outputs.latest_tag }}
          if [ "v$current_version" != "$latest_tag" ]; then
            echo "检测到新版本：v$current_version"
            git tag "v$current_version"
            git push origin "v$current_version"
            echo "create_release=true" >> $GITHUB_OUTPUT
          else
            echo "版本无更新，跳过打标签。"
            echo "create_release=false" >> $GITHUB_OUTPUT
          fi
      
      - name: 创建 GitHub Release
        if: steps.create_tag.outputs.create_release == 'true'
        run: |
          current_version=${{ steps.get_version.outputs.version }}
          previous_tag=${{ steps.get_tag.outputs.previous_tag }}
          # 从 docs/CHANGELOG.md 中提取当前版本的更新日志
          release_body=$(sed -n "/^## \[$current_version\]/,/^## /p" docs/CHANGELOG.md | sed '1d;$d')
          echo "Release Body 内容："
          echo "$release_body"
          # 使用 jq 组装 JSON 参数
          json=$(jq -n \
            --arg tag "v$current_version" \
            --arg name "Release v$current_version" \
            --arg body "$release_body" \
            --arg prev_tag "$previous_tag" \
            '{
              tag_name: $tag,
              name: $name,
              body: $body,
              prerelease: true,
              discussion_category_name: "发布说明"
            }')
          echo "$json"
          curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/releases \
            -d "$json"