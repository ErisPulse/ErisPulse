name: Auto Tag and Release

permissions:
  contents: write

on:
  push:
    branches: [ main ]

jobs:
  auto-tag-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: 克隆代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 提取版本和提交信息
        id: info
        shell: bash
        run: |
          # 获取版本号
          version=$(grep '^version' pyproject.toml | head -1 | sed 's/version = "//;s/"//')
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "当前版本：$version"
          
          # 检查是否为开发版本
          if [[ $version =~ dev|alpha|beta|a|b ]]; then
            echo "is_dev=true" >> $GITHUB_OUTPUT
          else
            echo "is_dev=false" >> $GITHUB_OUTPUT
          fi
          
          # 获取提交信息
          commit_msg=$(git log -1 --pretty=%B)
          commit_short=$(git rev-parse --short HEAD)
          echo "commit_short=$commit_short" >> $GITHUB_OUTPUT
          echo "commit_msg<<EOF" >> $GITHUB_OUTPUT
          echo "$commit_msg" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 处理发行版
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          version="${{ steps.info.outputs.version }}"
          commit_short="${{ steps.info.outputs.commit_short }}"
          commit_msg="${{ steps.info.outputs.commit_msg }}"
          is_dev="${{ steps.info.outputs.is_dev }}"
          tag_name="v$version"
          
          # 构建更新日志
          if [ -f "docs/CHANGELOG.md" ]; then
            changelog=$(sed -n "/^## \[$version\]/,/^## /p" docs/CHANGELOG.md | sed '1d;$d')
          fi
          
          if [ -z "$changelog" ]; then
            changelog="### 更新内容\n\n- $commit_msg ($commit_short)"
          fi
          
          # 检查标签是否存在
          if ! git rev-parse "$tag_name" >/dev/null 2>&1; then
            git tag "$tag_name"
            git push origin "$tag_name"
          fi
          
          # 使用 GitHub CLI 处理发行版
          if gh release view "$tag_name" &>/dev/null; then
            # 更新现有发行版
            gh release edit "$tag_name" \
              --notes "$changelog" \
              --prerelease=$is_dev
            echo "已更新发行版 $tag_name"
          else
            # 创建新发行版
            gh release create "$tag_name" \
              --notes "$changelog" \
              --title "Release $tag_name" \
              --prerelease=$is_dev
            echo "已创建发行版 $tag_name"
          fi