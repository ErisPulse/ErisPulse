name: 🎀 艾莉丝的API文档魔法 ~

on:
  push:
    branches: [ "main", "develop" ]
    paths:
      - 'ErisPulse/*.py'
  pull_request:
    branches: [ "main", "develop" ]
    paths:
      - 'ErisPulse/*.py'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-docs:
    name: ✨ 更新API文档
    runs-on: ubuntu-latest
    
    steps:
      - name: 🏗️ 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 🐍 设置Python环境
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          
      - name: � 安装依赖
        run: |
          python -m pip install --upgrade pip
          
      - name: � 更新API文档
        run: |
          python <<'EOF'
import re
import os
from pathlib import Path

def extract_module_docs(file_path):
    """Extract the module documentation from a Python file."""
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Match the module docstring (triple-quoted string at start of file)
    match = re.search(r'^\"\"\"(.*?)\"\"\"', content, re.DOTALL)
    if not match:
        return None
    
    docstring = match.group(1).strip()
    return docstring

def update_reference_docs(module_name, docs, reference_path, module_path):
    """Update the REFERENCE.md file with module documentation.
    
    Args:
        module_name: Name of the module
        docs: Extracted documentation string
        reference_path: Path to REFERENCE.md file
        module_path: Relative path to the module file
    """
    if not docs:
        return
    
    # Create docs directory if not exists
    reference_path.parent.mkdir(exist_ok=True)
    
    # Initialize file if not exists
    if not reference_path.exists():
        with open(reference_path, 'w', encoding='utf-8') as f:
            f.write("# API Reference Documentation\n\n")
    
    # Read existing content
    with open(reference_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Prepare section header
    section_header = f"## {module_name} (source: {module_path})"
    
    # Check if section exists
    section_pattern = re.escape(section_header)
    match = re.search(section_pattern, content, re.IGNORECASE)
    
    if match:
        # Section exists - check if docs are the same
        section_start = match.start()
        next_section = re.search(r'## ', content[section_start + 1:])
        section_end = section_start + next_section.start() if next_section else len(content)
        
        if docs.strip() in content[section_start:section_end]:
            print(f"Docs for {module_name} already up to date")
            return
            
        # Update existing section
        updated_content = (
            content[:section_start] +
            section_header + '\n\n' +
            docs + '\n\n' +
            content[section_end:]
        )
    else:
        # Add new section at the end
        updated_content = content + section_header + '\n\n' + docs + '\n\n'
    
    # Write back to file
    with open(reference_path, 'w', encoding='utf-8') as f:
        f.write(updated_content)
    print(f"Updated docs for {module_name} in REFERENCE.md")

def main():
    # Paths
    module_dir = Path('ErisPulse')
    reference_path = Path('docs/REFERENCE.md')
    
    # Process each module
    modules = ['__init__', '__main__', 'adapter', 'db', 'logger', 'mods', 'raiserr', 'util']
    
    for module in modules:
        py_file = module_dir / f'{module}.py'
        if not py_file.exists():
            print(f"Warning: {py_file} not found")
            continue
            
        docs = extract_module_docs(py_file)
        if docs:
            update_reference_docs(module, docs, reference_path, f"ErisPulse/{module}.py")

if __name__ == '__main__':
    main()
EOF
          
      - name: 📚 获取变更信息
        id: changes
        run: |
          changed=$(git status --porcelain docs/REFERENCE.md)
          if [ -n "$changed" ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi
          
      - name: 💾 提交变更
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          git config --global user.name "docs-update[bot]"
          git config --global user.email "114514@erisdev.com"
          git add docs/REFERENCE.md
          git commit -m "📝 [自动更新] API文档"
          git push

      - name: 📩 发送通知
        if: steps.changes.outputs.has_changes == 'true'
        uses: ./.github/workflows/send-email
        with:
          subject: "[艾莉丝快报] API文档已更新"
          content: |
            <div style="font-family: 'Segoe UI', sans-serif; background-color: #2a2a3c; color: #f5f5f5; padding: 20px; border-radius: 8px;">
              <table width="100%" cellpadding="0" cellspacing="0">
                <tr>
                  <td align="center">
                    <img src="https://raw.githubusercontent.com/${{ github.repository }}/main/.github/assets/erispulse_logo.png" alt="ErisPulse Logo"/>
                  </td>
                </tr>
              </table>

              <h2 style="color: #ff6ec7;">API文档已被魔法更新 ✨</h2>

              <hr style="border: none; border-top: 1px solid #333; margin: 20px 0;" />

              <p><strong>更新内容：</strong></p>
              <pre style="background-color: #3b3b4f; padding: 10px; border-radius: 4px; white-space: pre-wrap;">$(git diff --cached docs/REFERENCE.md)</pre>

              <p><strong>查看完整文档：</strong><br/>
              <a href="https://github.com/${{ github.repository }}/blob/main/docs/REFERENCE.md" style="color: #7acbf7; text-decoration: none;">
                点击查看API文档
              </a></p>

              <p>—— 艾莉丝·格雷拉特 ⚔️</p>
            </div>
          recipients: ${{ toJson(fromJson('{"emails":["dev@erisdev.com"]}').emails) }}
          resend_api_key: ${{ secrets.RESEND_API_KEY }}
          feishu_smtp_password: ${{ secrets.FEISHU_SMTP_PASSWORD }}